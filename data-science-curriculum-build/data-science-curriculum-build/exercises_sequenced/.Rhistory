library(tidyverse)
# knitr options
knitr::opts_chunk$set(echo = TRUE)
head(iris)
?diamonds
glimpse(diamonds)
summary(diamonds)
diamonds %>%
group_by(cut) %>%
summarize(carat_mean = mean(carat))
diamonds%>% summary()
df_q5
df_q5 <-
read.csv("./data/tiny.csv")
View(df_q5)
View(df_q5)
library(tidyverse)
## TODO: Re-write the code above following the tidyverse style guide
vignette(package = "dplyr")
iris %>%
as_tibble() %>%
filter(
# TODO: Filter on Species "setosa"
Species == "setosa"
)
## TODO: Consult the docs; Write your code here
iri %>%
as.tibble()%>%
filter(
5.1<=Sepal.Length,
Sepal.length <= 6.4
)
## TODO: Consult the docs; Write your code here
iris %>%
as.tibble()%>%
filter(
5.1<=Sepal.Length,
Sepal.length <= 6.4
)
## TODO: Consult the docs; Write your code here
iris %>%
as.tibble()%>%
filter(
5.1 <= Sepal.Length,
Sepal.Length <= 6.4
)
?cut_number
?cut_number
?parse_number()
?row_number()
?cut_number
?parse_number()
?cut_number
?parse_number()
?row_number()
library(tidyverse)
## TODO: Re-write the code above following the tidyverse style guide
diamonds %>%
group_by(cut) %>%
summarize(
mean_price = mean(price)
)
## Original code; hard to read
summarize(group_by(diamonds, cut), mean_price = mean(price))
## TODO: Re-write the code above following the tidyverse style guide
iris %>%
mutate(Sepal.Area = Sepal.Length * Sepal.Width) %>%
group_by(Species) %>%
summarise_if(is.numeric, mean)%>%
ungroup() %>%
pivot_longer(names_to = "measure", values_to = "value", cols = -Species) %>%
arrange(value)
## NOTE: You can copy this code to the chunk below
iris %>%
mutate(Sepal.Area=Sepal.Length*Sepal.Width) %>%
group_by( Species ) %>%
summarize_if(is.numeric,mean)%>%
ungroup() %>%
pivot_longer( names_to="measure",values_to="value",cols=-Species ) %>%
arrange(value )
## TODO: Re-write the code above following the tidyverse style guide
iris %>%
group_by(Species) %>%
summarize(
Sepal.Length = mean(Sepal.Length),
Sepal.Width = mean(Sepal.Width),
Petal.Length = mean(Petal.Length),
Petal.Width = mean(Petal.Width)
)
# knitr options
knitr::opts_chunk$set(echo = TRUE)
## Re-indent these lines
c(
"foo",
"bar",
"goo",
"gah"
)
## Re-indent these lines
c(
"foo",
"bar",
"goo",
"gah"
)
# knitr options
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
## TODO: Assign the appropriate vector to vec_q1
vec_q1 <- c(1, 2, 3)
vec_q1
## NOTE: No need to change this
assertthat::assert_that(length(vec_q1) == 3)
assertthat::assert_that(mean(vec_q1) == 2)
print("Nice!")
## TODO: Assign the appropriate vector to vec_q2
vec_q2 <- c(vec_q1, 4)
vec_q2
## NOTE: No need to change this
assertthat::assert_that(length(vec_q2) == 4)
assertthat::assert_that(mean(vec_q2) == 2.5)
print("Well done!")
# knitr options
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
# knitr options
knitr::opts_chunk$set(echo = TRUE)
## TASK: Describe what went wrong here
## Set our airport
airport <- "BOS"
## Check our airport value
airport == ATL
v_string <- c("00", "45", "90")
v_integer <- NA_real_
v_string <- c("00", "45", "90")
v_integer <- as.integer(v_string)
## NOTE: No need to change this!
assertthat::assert_that(
assertthat::are_equal(
v_integer,
c(0L, 45L, 90L)
)
)
print("Great job!")
library(tidyverse)
## NOTE: No need to edit; just run and inspect
diamonds %>%
slice_sample(n = 1000) %>%
ggplot(aes(carat, price)) +
geom_point() +
scale_x_log10() +
scale_y_log10() +
theme_minimal() +
labs(x = "", y = "")
# knitr options
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
diamonds %>% glimpse()
diamonds %>%
ggplot(aes(cut)) +
geom_bar()
diamonds %>%
ggplot(aes(cut, price)) +
geom_point()
diamonds %>%
ggplot(aes(cut, price)) +
geom_boxplot()
diamonds %>%
ggplot(aes(cut, carat)) +
geom_boxplot()
library(tidyverse)
library(nycflights13) # For `flights` data
flights %>% glimpse
library(tidyverse)
library(nycflights13) # For `flights` data
## df_q1 <- TODO: Your code goes here!
df_q1 <- flights %>% select(ends_with("_time"))
## df_q1 <- TODO: Your code goes here!
df_q1 <- flights %>% select(ends_with("_time"))
df_q1
## NOTE: No need to change this
assertthat::assert_that(
all(names(df_q1) %>% str_detect(., "_time$"))
)
print("Nice!")
df_q2 <- flights %>% select(everything()) # TODO: Modify to move columns to the front
df_q2
df_q2 <- flights %>% select("dest","origin","carrier",everything()) # TODO: Modify to move columns to the front
df_q2
## NOTE: No need to change this
assertthat::assert_that(
assertthat::are_equal(names(df_q2)[1:5], c("dest", "origin", "carrier", "year", "month"))
)
print("Well done!")
flights %>% filter(dest = LAX) # Uncomment and run to see error
flights %>% filter(dest == LAX) # Uncomment and run to see error
flights %>% filter(dest == "LAX") # Uncomment and run to see error
BOS <- "LGA"
flights %>% filter(dest == "BOS")
BOS <- "LGA"
flights %>% filter(dest == BOS)
"BOS" <- "LGA"
flights %>% filter(dest == "BOS")
BOS <- "LGA"
flights %>% filter(dest == "BOS")
BOS <- "LGA"
flights %>% filter(dest == BOS)
## df_q5a <- dest is JFK, LGA, or EWR
df_q5a <- flights %>% filter(
dest == "JFK" || "LGA" || "EWR"
)
## df_q5a <- dest is JFK, LGA, or EWR
df_q5a <- flights %>% filter(
dest == "JFK" || dest == "LGA" || dest == "EWR"
)
## df_q5b <- origin is JFK, LGA, or EWR
## NOTE: No need to change this!
assertthat::assert_that(
df_q5a %>%
mutate(flag = dest %in% c("JFK", "LGA", "EWR")) %>%
summarize(flag = all(flag)) %>%
pull(flag)
)
assertthat::assert_that(
df_q5b %>%
mutate(flag = origin %in% c("JFK", "LGA", "EWR")) %>%
summarize(flag = all(flag)) %>%
pull(flag)
)
## df_q5a <- dest is JFK, LGA, or EWR
df_q5a <- flights %>% filter(
dest == "JFK" || dest == "LGA" || dest == "EWR"
)
df_q5b <- flights %>% filter(
origin == "JFK" || origin == "LGA" || origin == "EWR"
)
## df_q5b <- origin is JFK, LGA, or EWR
## NOTE: No need to change this!
assertthat::assert_that(
df_q5a %>%
mutate(flag = dest %in% c("JFK", "LGA", "EWR")) %>%
summarize(flag = all(flag)) %>%
pull(flag)
)
assertthat::assert_that(
df_q5b %>%
mutate(flag = origin %in% c("JFK", "LGA", "EWR")) %>%
summarize(flag = all(flag)) %>%
pull(flag)
)
print("Nice!")
## df_q6 <- TODO: Your code here!
df_q6 <- flights %>% select(
"air_time", "dest",everything()
)
df_q6
## NOTE: No need to change this!
assertthat::assert_that(
assertthat::are_equal(
df_q6 %>% head(1) %>% pull(air_time),
flights %>% pull(air_time) %>% max(na.rm = TRUE)
)
)
## df_q5a <- dest is JFK, LGA, or EWR
df_q5a <- flights %>% filter(
dest == "JFK" || dest == "LGA" || dest == "EWR"
)
f <- flights
View(f)
?filter
## df_q5a <- dest is JFK, LGA, or EWR
df_q5a <- flights %>% filter(
(dest == "JFK") || (dest == "LGA") || (dest == "EWR")
)
df_q5b <- flights %>% filter(
origin == "JFK" || origin == "LGA" || origin == "EWR"
)
## df_q5b <- origin is JFK, LGA, or EWR
## df_q5a <- dest is JFK, LGA, or EWR
df_q5a <- flights %>% filter((dest == "JFK") || (dest == "LGA") || (dest == "EWR"))
df_q5b <- flights %>% filter(
origin == "JFK" || origin == "LGA" || origin == "EWR"
)
## df_q5b <- origin is JFK, LGA, or EWR
## df_q5a <- dest is JFK, LGA, or EWR
df_q5a <- flights %>% filter((dest == "JFK") || (dest == "LGA") || (dest == "EWR"))
## df_q5a <- dest is JFK, LGA, or EWR
df_q5a <- flights %>% filter((dest == "JFK") | (dest == "LGA") | (dest == "EWR"))
df_q5b <- flights %>% filter(
origin == "JFK" || origin == "LGA" || origin == "EWR"
)
## df_q5b <- origin is JFK, LGA, or EWR
## df_q5a <- dest is JFK, LGA, or EWR
df_q5a <- flights %>% filter((dest == "JFK") || (dest == "LGA") || (dest == "EWR"))
df_q5b <- flights %>% filter(
(origin == "JFK") || (origin == "LGA") || (origin == "EWR")
)
## df_q5a <- dest is JFK, LGA, or EWR
df_q5a <- flights %>% filter((dest == "JFK") || (dest == "LGA") || (dest == "EWR"))
df_q5b <- flights %>% filter(
(origin == "JFK") || (origin == "LGA") || (origin == "EWR")
)
## df_q5b <- origin is JFK, LGA, or EWR
## df_q6 <- TODO: Your code here!
df_q6 <- flights %>% select(
"air_time", "dest",everything()
)
df_q6
## NOTE: No need to change this!
assertthat::assert_that(
assertthat::are_equal(
df_q6 %>% head(1) %>% pull(air_time),
flights %>% pull(air_time) %>% max(na.rm = TRUE)
)
)
## df_q5a <- dest is JFK, LGA, or EWR
df_q5a <- flights %>% filter((dest == "JFK") | (dest == "LGA") | (dest == "EWR"))
df_q5b <- flights %>% filter(
(origin == "JFK") | (origin == "LGA") | (origin == "EWR")
)
## df_q5b <- origin is JFK, LGA, or EWR
## NOTE: No need to change this!
assertthat::assert_that(
df_q5a %>%
mutate(flag = dest %in% c("JFK", "LGA", "EWR")) %>%
summarize(flag = all(flag)) %>%
pull(flag)
)
assertthat::assert_that(
df_q5b %>%
mutate(flag = origin %in% c("JFK", "LGA", "EWR")) %>%
summarize(flag = all(flag)) %>%
pull(flag)
)
print("Nice!")
## df_q6 <- TODO: Your code here!
df_q6 <- flights %>% select(
"air_time", "dest",everything()
) %>% arrange(desc(air_time))
df_q6
## NOTE: No need to change this!
assertthat::assert_that(
assertthat::are_equal(
df_q6 %>% head(1) %>% pull(air_time),
flights %>% pull(air_time) %>% max(na.rm = TRUE)
)
)
assertthat::assert_that(
assertthat::are_equal(
df_q6 %>% filter(!is.na(air_time)) %>% tail(1) %>% pull(air_time),
flights %>% pull(air_time) %>% min(na.rm = TRUE)
)
)
assertthat::assert_that(
assertthat::are_equal(
names(df_q6)[1:2],
c("air_time", "dest")
)
)
print("Great job!")
# knitr options
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
mpg %>%
ggplot(aes(trans)) +
geom_bar()
mpg %>%
ggplot(aes(trans)) +
geom_col()
mpg %>%
ggplot(mapping =aes(trans)) +
geom_col()
mpg %>%
ggplot() +
geom_col(mapping =aes(trans))
mpg %>%
ggplot() +
geom_col(mapping =aes(x=trans, y=0)
mpg %>%
ggplot() +
geom_col(mapping =aes(x=trans, y=n))
mpg %>%
count(trans) %>%
ggplot(mapping =aes(x=trans, y=n)) +
geom_col()
## NOTE: Run this chunk for an illustration
mpg %>% filter(cty == 20)
