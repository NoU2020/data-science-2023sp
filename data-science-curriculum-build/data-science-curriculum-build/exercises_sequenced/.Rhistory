labs(x = "", y = "")
# knitr options
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
diamonds %>% glimpse()
diamonds %>%
ggplot(aes(cut)) +
geom_bar()
diamonds %>%
ggplot(aes(cut, price)) +
geom_point()
diamonds %>%
ggplot(aes(cut, price)) +
geom_boxplot()
diamonds %>%
ggplot(aes(cut, carat)) +
geom_boxplot()
library(tidyverse)
library(nycflights13) # For `flights` data
flights %>% glimpse
library(tidyverse)
library(nycflights13) # For `flights` data
## df_q1 <- TODO: Your code goes here!
df_q1 <- flights %>% select(ends_with("_time"))
## df_q1 <- TODO: Your code goes here!
df_q1 <- flights %>% select(ends_with("_time"))
df_q1
## NOTE: No need to change this
assertthat::assert_that(
all(names(df_q1) %>% str_detect(., "_time$"))
)
print("Nice!")
df_q2 <- flights %>% select(everything()) # TODO: Modify to move columns to the front
df_q2
df_q2 <- flights %>% select("dest","origin","carrier",everything()) # TODO: Modify to move columns to the front
df_q2
## NOTE: No need to change this
assertthat::assert_that(
assertthat::are_equal(names(df_q2)[1:5], c("dest", "origin", "carrier", "year", "month"))
)
print("Well done!")
flights %>% filter(dest = LAX) # Uncomment and run to see error
flights %>% filter(dest == LAX) # Uncomment and run to see error
flights %>% filter(dest == "LAX") # Uncomment and run to see error
BOS <- "LGA"
flights %>% filter(dest == "BOS")
BOS <- "LGA"
flights %>% filter(dest == BOS)
"BOS" <- "LGA"
flights %>% filter(dest == "BOS")
BOS <- "LGA"
flights %>% filter(dest == "BOS")
BOS <- "LGA"
flights %>% filter(dest == BOS)
## df_q5a <- dest is JFK, LGA, or EWR
df_q5a <- flights %>% filter(
dest == "JFK" || "LGA" || "EWR"
)
## df_q5a <- dest is JFK, LGA, or EWR
df_q5a <- flights %>% filter(
dest == "JFK" || dest == "LGA" || dest == "EWR"
)
## df_q5b <- origin is JFK, LGA, or EWR
## NOTE: No need to change this!
assertthat::assert_that(
df_q5a %>%
mutate(flag = dest %in% c("JFK", "LGA", "EWR")) %>%
summarize(flag = all(flag)) %>%
pull(flag)
)
assertthat::assert_that(
df_q5b %>%
mutate(flag = origin %in% c("JFK", "LGA", "EWR")) %>%
summarize(flag = all(flag)) %>%
pull(flag)
)
## df_q5a <- dest is JFK, LGA, or EWR
df_q5a <- flights %>% filter(
dest == "JFK" || dest == "LGA" || dest == "EWR"
)
df_q5b <- flights %>% filter(
origin == "JFK" || origin == "LGA" || origin == "EWR"
)
## df_q5b <- origin is JFK, LGA, or EWR
## NOTE: No need to change this!
assertthat::assert_that(
df_q5a %>%
mutate(flag = dest %in% c("JFK", "LGA", "EWR")) %>%
summarize(flag = all(flag)) %>%
pull(flag)
)
assertthat::assert_that(
df_q5b %>%
mutate(flag = origin %in% c("JFK", "LGA", "EWR")) %>%
summarize(flag = all(flag)) %>%
pull(flag)
)
print("Nice!")
## df_q6 <- TODO: Your code here!
df_q6 <- flights %>% select(
"air_time", "dest",everything()
)
df_q6
## NOTE: No need to change this!
assertthat::assert_that(
assertthat::are_equal(
df_q6 %>% head(1) %>% pull(air_time),
flights %>% pull(air_time) %>% max(na.rm = TRUE)
)
)
## df_q5a <- dest is JFK, LGA, or EWR
df_q5a <- flights %>% filter(
dest == "JFK" || dest == "LGA" || dest == "EWR"
)
f <- flights
View(f)
?filter
## df_q5a <- dest is JFK, LGA, or EWR
df_q5a <- flights %>% filter(
(dest == "JFK") || (dest == "LGA") || (dest == "EWR")
)
df_q5b <- flights %>% filter(
origin == "JFK" || origin == "LGA" || origin == "EWR"
)
## df_q5b <- origin is JFK, LGA, or EWR
## df_q5a <- dest is JFK, LGA, or EWR
df_q5a <- flights %>% filter((dest == "JFK") || (dest == "LGA") || (dest == "EWR"))
df_q5b <- flights %>% filter(
origin == "JFK" || origin == "LGA" || origin == "EWR"
)
## df_q5b <- origin is JFK, LGA, or EWR
## df_q5a <- dest is JFK, LGA, or EWR
df_q5a <- flights %>% filter((dest == "JFK") || (dest == "LGA") || (dest == "EWR"))
## df_q5a <- dest is JFK, LGA, or EWR
df_q5a <- flights %>% filter((dest == "JFK") | (dest == "LGA") | (dest == "EWR"))
df_q5b <- flights %>% filter(
origin == "JFK" || origin == "LGA" || origin == "EWR"
)
## df_q5b <- origin is JFK, LGA, or EWR
## df_q5a <- dest is JFK, LGA, or EWR
df_q5a <- flights %>% filter((dest == "JFK") || (dest == "LGA") || (dest == "EWR"))
df_q5b <- flights %>% filter(
(origin == "JFK") || (origin == "LGA") || (origin == "EWR")
)
## df_q5a <- dest is JFK, LGA, or EWR
df_q5a <- flights %>% filter((dest == "JFK") || (dest == "LGA") || (dest == "EWR"))
df_q5b <- flights %>% filter(
(origin == "JFK") || (origin == "LGA") || (origin == "EWR")
)
## df_q5b <- origin is JFK, LGA, or EWR
## df_q6 <- TODO: Your code here!
df_q6 <- flights %>% select(
"air_time", "dest",everything()
)
df_q6
## NOTE: No need to change this!
assertthat::assert_that(
assertthat::are_equal(
df_q6 %>% head(1) %>% pull(air_time),
flights %>% pull(air_time) %>% max(na.rm = TRUE)
)
)
## df_q5a <- dest is JFK, LGA, or EWR
df_q5a <- flights %>% filter((dest == "JFK") | (dest == "LGA") | (dest == "EWR"))
df_q5b <- flights %>% filter(
(origin == "JFK") | (origin == "LGA") | (origin == "EWR")
)
## df_q5b <- origin is JFK, LGA, or EWR
## NOTE: No need to change this!
assertthat::assert_that(
df_q5a %>%
mutate(flag = dest %in% c("JFK", "LGA", "EWR")) %>%
summarize(flag = all(flag)) %>%
pull(flag)
)
assertthat::assert_that(
df_q5b %>%
mutate(flag = origin %in% c("JFK", "LGA", "EWR")) %>%
summarize(flag = all(flag)) %>%
pull(flag)
)
print("Nice!")
## df_q6 <- TODO: Your code here!
df_q6 <- flights %>% select(
"air_time", "dest",everything()
) %>% arrange(desc(air_time))
df_q6
## NOTE: No need to change this!
assertthat::assert_that(
assertthat::are_equal(
df_q6 %>% head(1) %>% pull(air_time),
flights %>% pull(air_time) %>% max(na.rm = TRUE)
)
)
assertthat::assert_that(
assertthat::are_equal(
df_q6 %>% filter(!is.na(air_time)) %>% tail(1) %>% pull(air_time),
flights %>% pull(air_time) %>% min(na.rm = TRUE)
)
)
assertthat::assert_that(
assertthat::are_equal(
names(df_q6)[1:2],
c("air_time", "dest")
)
)
print("Great job!")
# knitr options
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
mpg %>%
ggplot(aes(trans)) +
geom_bar()
mpg %>%
ggplot(aes(trans)) +
geom_col()
mpg %>%
ggplot(mapping =aes(trans)) +
geom_col()
mpg %>%
ggplot() +
geom_col(mapping =aes(trans))
mpg %>%
ggplot() +
geom_col(mapping =aes(x=trans, y=0)
mpg %>%
ggplot() +
geom_col(mapping =aes(x=trans, y=n))
mpg %>%
count(trans) %>%
ggplot(mapping =aes(x=trans, y=n)) +
geom_col()
## NOTE: Run this chunk for an illustration
mpg %>% filter(cty == 20)
# knitr options
knitr::opts_chunk$set(echo = TRUE)
## NOTE: Run this chunk for an illustration
mpg %>%
ggplot(aes(cty, hwy)) +
geom_point()
# knitr options
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
mpg %>%
count(trans) %>%
ggplot(mapping =aes(x=trans, y=n)) +
geom_col()
## NOTE: Run this chunk for an illustration
mpg %>% filter(cty == 20)
mpg %>%
ggplot(aes(x = cty, y = hwy)) +
geom_col()
## NOTE: Run this chunk for an illustration
mpg %>%
ggplot(aes(cty, hwy)) +
geom_point()
## TODO: Run this code without changing, describe your observations on the data
mpg %>%
ggplot(aes(class, fill = class)) +
geom_bar()
## TODO: Run this code without changing, describe your observations on the data
mpg %>%
ggplot(aes(class, fill = drv)) +
geom_bar()
mpg %>%
ggplot(aes(x = manufacturer, fill = class), position = "dodge") +
geom_bar() +
theme(axis.text.x = element_text(angle = 270, vjust = 0.5, hjust = 0))
mpg %>%
ggplot(aes(x = cty, y = hwy)) +
geom_col()
!geom_col()
geom_col()
mpg %>%
ggplot(aes(x = cty, y = hwy)) +
geom_col(position = "jitter")
mpg %>%
ggplot(aes(x = cty, y = hwy)) +
geom_col(position = "dodge")
## NOTE: Run this chunk for an illustration
mpg %>%
ggplot(aes(cty, hwy)) +
geom_point()
## TODO: Run this code without changing, describe your observations on the data
mpg %>%
ggplot(aes(class, fill = class)) +
geom_bar()
## TODO: Run this code without changing, describe your observations on the data
mpg %>%
ggplot(aes(class, fill = drv)) +
geom_bar()
mpg %>%
ggplot(aes(x = cyl)) +
geom_bar() +
facet_grid(~ manufacturer)
mpg %>%
ggplot(aes(x = cyl)) +
geom_bar() +
facet_wrap(~ manufacturer)
library(tidyverse)
df_titanic <- as_tibble(Titanic)
## TASK: Perform a `glimpse` of df_titanic
glimpse('df_titanic')
## TASK: Perform a `glimpse` of df_titanic
glimpse(df_titanic)
View(df_titanic)
View(df_titanic)
## NOTE: No need to edit! We'll cover how to
## do this calculation in a later exercise.
df_titanic %>% summarize(total = sum(n))
## TASK: Visualize counts against `Class` and `Sex`
df_titanic %>%
ggplot(aes(x = Class, fill = Sex), position = "dodge") +
geom_bar() +
theme(axis.text.x = element_text(angle = 270, vjust = 0.5, hjust = 0))
## TASK: Visualize counts against `Class` and `Sex`
df_titanic %>%
ggplot(aes(x = Class, fill = n), position = "dodge") +
geom_bar() +
## TASK: Visualize counts against `Class` and `Sex`
df_titanic %>%
filter(Survived ="Yes") %>%
ggplot(aes(class, fill = Sex)) +
geom_col(position = "dodge")
## TASK: Visualize counts against `Class` and `Sex`
df_titanic %>%
filter(Survived =="Yes") %>%
ggplot(aes(class, fill = Sex)) +
geom_col(position = "dodge")
## TASK: Visualize counts against `Class` and `Sex`
df_titanic %>%
filter(Survived =="Yes") %>%
ggplot(aes(x=Class, y=n, fill = Sex)) +
geom_col(position = "dodge")
## NOTE: No need to edit! We'll cover how to
## do this calculation in a later exercise.
df_prop <-
df_titanic %>%
group_by(Class, Sex, Age) %>%
mutate(
Total = sum(n),
Prop = n / Total
) %>%
ungroup()
df_prop
df_titanic %>%
filter(Survived =="Yes") %>%
ggplot(aes(x=Class, y=Prop, fill = Sex)) +
geom_col(position = "dodge")
df_titanic %>%
filter(Survived =="Yes") %>%
ggplot(aes(x=Class, y=df_prop, fill = Sex)) +
geom_col(position = "dodge")
df_prop <-
df_titanic %>%
group_by(Class, Sex, Age) %>%
mutate(
Total = sum(n),
Prop = n / Total
) %>%
ungroup()
df_titanic %>%
filter(Survived =="Yes") %>%
ggplot(aes(x=Class, y=df_prop, fill = Sex)) +
geom_col(position = "dodge")
df_prop <-
df_titanic %>%
group_by(Class, Sex, Age) %>%
mutate(
Total = sum(n),
Prop = n / Total
) %>%
ungroup()
df_titanic %>%
filter(Survived =="Yes") %>%
ggplot(aes(x=Class, y=df_prop.Prop, fill = Sex)) +
geom_col(position = "dodge")
df_prop %>%
filter(Survived =="Yes") %>%
ggplot(aes(x=Class, y=Prop, fill = Sex)) +
geom_col(position = "dodge")
df_prop %>%
filter(Survived =="Yes") %>%
ggplot(aes(x=Class, y=Prop, fill = Sex)) +
geom_col(position = "dodge") +
facet_wrap(~ Age)
df_prop %>%
filter(Survived =="Yes") %>%
ggplot(aes(x=Class, y=Prop, fill = Sex)) +
geom_col(position = "dodge", color="White")
# knitr options
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
## Version 1
filter(diamonds, cut == "Ideal")
## Version 2
diamonds %>% filter(cut == "Ideal")
## Version 1
filter(diamonds, cut == "Ideal")
## Version 2
diamonds %>% filter(cut == "Ideal")
df_q2
df_q2 <-
diamonds %>%
summarize(n_ideal = sum(cut ==  "Ideal"))
View(df_q2)
View(df_q2)
## NOTE: No need to change this!
assertthat::assert_that(
assertthat::are_equal(
df_q2 %>% pull(n_ideal),
21551
)
)
print("Great job!")
diamonds %>%
## group_by(color, clarity) %>%
summarize(price = mean(price))
diamonds %>%
group_by(color, clarity) %>%
summarize(price = mean(price))
diamonds %>%
##group_by(color, clarity) %>%
summarize(price = mean(price))
diamonds %>%
group_by(color, clarity) %>%
summarize(price = mean(price))
## TODO: Compute the `cov_depth` and `cov_diff` and assign the result to df_q4
df_q4 <-
diamonds
df_q4
?diamonds
## TODO: Compute the `cov_depth` and `cov_diff` and assign the result to df_q4
df_q4 <-
diamonds %>%
mutate(
depth_computed = 100 * 2 * z / (x + y),
diff = depth -depth_computed
) %>%
summarize(
depth_mean = mean(depth),
diff_mean = diff(diff),
depth_sd = sd(depth),
diff_sd = sd(diff),
cov_depth = depth_sd / depth_mean,
cov_diff = diff_sd / diff_mean
)
df_q4
## TODO: Compute the `cov_depth` and `cov_diff` and assign the result to df_q4
df_q4 <-
diamonds %>%
mutate(
depth_computed = 100 * 2 * z / (x + y),
diff = depth -depth_computed
) %>%
summarize(
depth_mean = mean(depth),
diff_mean = mean(diff),
depth_sd = sd(depth),
diff_sd = sd(diff),
cov_depth = depth_sd / depth_mean,
cov_diff = diff_sd / diff_mean
)
df_q4
## TODO: Compute the `cov_depth` and `cov_diff` and assign the result to df_q4
df_q4 <-
diamonds %>%
mutate(
depth_computed = 100 * 2 * z / (x + y),
diff = depth - depth_computed
) %>%
summarize(
depth_mean = mean(depth),
diff_mean = mean(diff),
depth_sd = sd(depth),
diff_sd = sd(diff),
cov_depth = depth_sd / depth_mean,
cov_diff = diff_sd / diff_mean
)
df_q4
## TODO: Compute the `cov_depth` and `cov_diff` and assign the result to df_q4
df_q4 <-
diamonds %>%
mutate(
depth_computed = 100 * 2 * z / (x + y),
diff = depth - depth_computed
) %>%
summarize(
depth_mean = mean(depth, na.rm=TRUE),
diff_mean = mean(diff, na.rm=TRUE),
depth_sd = sd(depth, na.rm=TRUE),
diff_sd = sd(diff, na.rm=TRUE),
cov_depth = depth_sd / depth_mean,
cov_diff = diff_sd / diff_mean
)
df_q4
## TODO: Compute the `cov_depth` and `cov_diff` and assign the result to df_q4
df_q4 <-
diamonds %>%
mutate(
depth_computed = 100 * 2 * z / (x + y),
diff = depth - depth_computed
) %>%
summarize(
depth_mean = mean(depth, na.rm=TRUE),
diff_mean = mean(diff, na.rm=TRUE),
depth_sd = sd(depth, na.rm=TRUE),
diff_sd = sd(diff, na.rm=TRUE),
cov_depth = depth_sd / depth_mean,
cov_diff = diff_sd / diff_mean
)
df_q4
