income_estimate = Estimate,
income_moe = "Margin of Error"
) %>%
select(Geography, geographic_area_name, category, income_estimate, income_moe) %>%
na.omit(df_q8)
df_data2 <- df_q8 %>%
left_join(df_pop, by = c("Geography" = "Geography")) %>%
select(-c('Geographic Area Name'))
wid <- 0.5
df_data2 %>%
filter(str_detect(geographic_area_name, "Massachusetts")) %>%
mutate(
county = str_remove(geographic_area_name, " County,.*$"),
county = fct_reorder(county, income_estimate)
) %>%
ggplot(aes(county, income_estimate, color = category)) +
geom_errorbar(
aes(ymin = income_lo, ymax = income_hi),
position = position_dodge(width = wid)
) +
geom_point(position = position_dodge(width = wid)) +
coord_flip() +
labs(
x = "County",
y = "Median Household Income"
)
## TODO: Pose and answer your own question about the data
df_q8 <-
df_income %>%
select(
Geography,
contains("Geographic"),
# This will select only the numeric d-person family columns;
# it will ignore the annotation columns
contains("median") & contains("by age of householder")&matches("\\d years") & !contains("Annotation of")
) %>%
mutate(across(contains("median"), as.numeric)) %>%
## TODO: Pivot the data, rename the columns
pivot_longer(
names_to = c(".value", "category"),
names_pattern = "(Estimate|Margin of Error).*(\\d\\d to \\d\\d years)",
cols = c(-Geography, -contains("Geographic")),
) %>%
rename(
geographic_area_name = 'Geographic Area Name',
income_estimate = Estimate,
income_moe = "Margin of Error"
) %>%
select(Geography, geographic_area_name, category, income_estimate, income_moe) %>%
na.omit(df_q8)
df_q8_2<-df_q8 %>%
mutate(
income_SE = income_moe / 1.645,
income_lo = income_estimate - income_SE,
income_hi = income_estimate + income_SE,
income_CV = income_SE / income_estimate
) %>%
select(Geography, geographic_area_name, category, income_estimate, income_moe,income_SE, income_lo, income_hi, income_CV)
df_data2 <- df_q8_2 %>%
left_join(df_pop, by = c("Geography" = "Geography")) %>%
select(-c('Geographic Area Name'))
wid <- 0.5
df_data2 %>%
filter(str_detect(geographic_area_name, "Massachusetts")) %>%
mutate(
county = str_remove(geographic_area_name, " County,.*$"),
county = fct_reorder(county, income_estimate)
) %>%
ggplot(aes(county, income_estimate, color = category)) +
geom_errorbar(
aes(ymin = income_lo, ymax = income_hi),
position = position_dodge(width = wid)
) +
geom_point(position = position_dodge(width = wid)) +
coord_flip() +
labs(
x = "County",
y = "Median Household Income"
)
## NOTE: No need to edit
assertthat::assert_that(setequal(
names(df_q4),
c("Geography", "geographic_area_name", "category", "income_estimate", "income_moe",
"income_SE", "income_lo", "income_hi", "income_CV")
))
assertthat::assert_that(
abs(
df_q4 %>%
filter(Geography == "0500000US01001", category == "2-person families") %>%
pull(income_SE) - 4050.456
) / 4050.456 < 1e-3
)
#assertthat::assert_that(
#  abs(
#    df_q4 %>%
#    filter(Geography == "0500000US01001", category == "2-person families") %>%
#    pull(income_lo) - 54513.72
#  ) / 54513.72 < 1e-3
#)
#assertthat::assert_that(
#  abs(
#    df_q4 %>%
#    filter(Geography == "0500000US01001", category == "2-person families") %>%
#    pull(income_hi) - 75380.28
#  ) / 75380.28 < 1e-3
#)
assertthat::assert_that(
abs(
df_q4 %>%
filter(Geography == "0500000US01001", category == "2-person families") %>%
pull(income_CV) - 0.06236556
) / 0.06236556 < 1e-3
)
print("Nice!")
library(tidyverse)
library(readxl)
library(broom)
library(modelr)
library(rsample)
## TODO:
df_sat <- "./data/sat.xls"
## TODO: Do your "first checks"
## TODO:
df_sat <- "./data/sat.xls"
## TODO: Do your "first checks"
df_sat %>% glimpse()
## TODO:
df_sat <- read_excel("./data/sat.xls")
## TODO: Do your "first checks"
df_sat %>% glimpse()
## NOTE: No need to edit this
df_composite <-
df_sat %>%
mutate(both_SAT = math_SAT + verb_SAT)
View(df_composite)
## TODO:
df_composite_long <- pivot_longer(df_composite, cols = c("high_GPA", "both_SAT"),
names_to = "variable", values_to = "value")
# Create the scatter plot with a regression line
ggplot(df_composite_long, aes(x = value, y = univ_GPA, color = variable)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE) +
labs(x = "Composite score", y = "University GPA", color = "") +
theme_bw()
# Create example data
x <- 1:10
y1 <- x^2
y2 <- 2*x
# Create plot with primary y-axis for y1
p <- ggplot() +
geom_line(aes(x = x, y = y1, color = "y1")) +
scale_color_manual("", values = "red") +
labs(y = "y1")
# Add secondary y-axis for y2
p + geom_line(aes(x = x, y = y2/10, color = "y2")) +
scale_color_manual("", values = "blue") +
labs(y = "y2") +
scale_y_continuous(sec.axis = sec_axis(~.*10, name = "y2"))
# Create example data
x <- 1:10
y1 <- x^2
y2 <- 2*x
# Create plot with primary y-axis for y1
p <- ggplot() +
geom_line(aes(x = x, y = y1, color = "y1")) +
scale_color_manual("", values = "red") +
labs(y = "y1")
# Add secondary y-axis for y2
p + geom_line(aes(x = x, y = y2/10, color = "y2")) +
labs(y = "y2") +
scale_y_continuous(sec.axis = sec_axis(~.*10, name = "y2"))
# Create example data
x <- 1:10
y1 <- x^2
y2 <- 2*x
# Create plot with primary y-axis for y1
p <- ggplot() +
geom_line(aes(x = x, y = y1, color = "y1")) +
labs(y = "y1")
# Add secondary y-axis for y2
p + geom_line(aes(x = x, y = y2/10, color = "y2")) +
labs(y = "y2") +
scale_y_continuous(sec.axis = sec_axis(~.*10, name = "y2"))
## TODO:
df_composite_long <- pivot_longer(df_composite, cols = c("high_GPA", "both_SAT"),
names_to = "variable", values_to = "value")
ggplot(df_composite_long) +
geom_point(aes(x = value, y = univ_GPA, color = variable)) +
labs(x = "Composite score", y = "University GPA", color = "")
# Create the scatter plot with a regression line
ggplot(df_composite_long, aes(x = value, y = univ_GPA, color = variable)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE) +
labs(x = "Composite score", y = "University GPA", color = "") +
theme_bw()
## TODO:
df_composite_long <- pivot_longer(df_composite, cols = c("high_GPA", "both_SAT"),
names_to = "variable", values_to = "value")
ggplot(df_composite_long) +
geom_point(aes(x = univ_GPA, y = value, color = variable)) +
labs(x = "Composite score", y = "University GPA", color = "")
# Create the scatter plot with a regression line
ggplot(df_composite_long, aes(x = value, y = univ_GPA, color = variable)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE) +
labs(x = "Composite score", y = "University GPA", color = "") +
theme_bw()
View(df_composite_long)
View(df_composite)
?sec_axis
## TODO:
ggplot(df_composite) +
geom_point(aes(x = univ_GPA, y = both_SAT, color = "both SAT")) +
labs(x = "Universit GPA", y = "both_SAT", color = "") +
geom_line(aes(x = univ_GPA, y = high_GPA, color = "highschool GPA")) +
labs(y = "both_SAT", color = "") +
scale_y_continuous(sec.axis = sec_axis(~.+10, name="highschool GPA"))
## TODO:
ggplot(df_composite) +
geom_point(aes(x = univ_GPA, y = both_SAT, color = "both SAT")) +
labs(x = "Universit GPA", y = "both_SAT", color = "") +
geom_line(aes(x = univ_GPA, y = high_GPA, color = "highschool GPA")) +
labs(y = "both_SAT", color = "") +
scale_y_continuous(sec.axis = sec_axis(~.*1, name="highschool GPA"))
## TODO:
ggplot(df_composite) +
geom_point(aes(x = univ_GPA, y = both_SAT, color = "both SAT")) +
labs(x = "Universit GPA", y = "both_SAT", color = "") +
geom_line(aes(x = univ_GPA, y = high_GPA, color = "highschool GPA")) +
labs(y = "both_SAT", color = "") +
scale_y_continuous(sec.axis = sec_axis(~.*.1, name="highschool GPA"))
## TODO:
ggplot(df_composite) +
geom_point(aes(x = univ_GPA, y = both_SAT, color = "both SAT")) +
labs(x = "Universit GPA", y = "both_SAT", color = "") +
geom_line(aes(x = univ_GPA, y = high_GPA, color = "highschool GPA")) +
labs(y = "both_SAT", color = "") +
scale_y_continuous(sec.axis = sec_axis(~.*.01, name="highschool GPA"))
## TODO:
p1<-ggplot(df_composite) +
geom_point(aes(x = univ_GPA, y = both_SAT, color = "both SAT")) +
labs(x = "Universit GPA", y = "both_SAT", color = "")
p2<-ggplot(df_composite) +
geom_line(aes(x = univ_GPA, y = high_GPA, color = "highschool GPA")) +
labs(y = "both_SAT", color = "")
## TODO:
p1<-ggplot(df_composite) +
geom_point(aes(x = univ_GPA, y = both_SAT, color = "both SAT")) +
labs(x = "Universit GPA", y = "both_SAT", color = "")
p2<-ggplot(df_composite) +
geom_line(aes(x = univ_GPA, y = high_GPA, color = "highschool GPA")) +
labs(y = "both_SAT", color = "")+
scale_y_continuous(name = "both_SAT", sec.axis = sec_axis(~./400)) # divide the y2 axis by 2
## TODO:
p1<-ggplot(df_composite) +
geom_point(aes(x = univ_GPA, y = both_SAT, color = "both SAT")) +
labs(x = "Universit GPA", y = "both_SAT", color = "")
p1
p2<-ggplot(df_composite) +
geom_line(aes(x = univ_GPA, y = high_GPA, color = "highschool GPA")) +
labs(y = "both_SAT", color = "")+
scale_y_continuous(name = "both_SAT", sec.axis = sec_axis(~./400)) # divide the y2 axis by 2
p2
## TODO:
p1<-ggplot(df_composite) +
geom_point(aes(x = univ_GPA, y = both_SAT, color = "both SAT")) +
labs(x = "Universit GPA", y = "both_SAT", color = "red")+
geom_line(aes(x = univ_GPA, y = high_GPA, color = "highschool GPA")) +
labs(y = "highschool GPA", color = "blue")+
scale_y_continuous(name = "highschool GPA", sec.axis = sec_axis(~./400)) # divide the y2 axis by 2
## TODO:
ggplot(df_composite) +
geom_point(aes(x = univ_GPA, y = both_SAT, color = "both SAT")) +
labs(x = "Universit GPA", y = "both_SAT", color = "red")+
geom_line(aes(x = univ_GPA, y = high_GPA, color = "highschool GPA")) +
labs(y = "highschool GPA", color = "blue")+
scale_y_continuous(name = "highschool GPA", sec.axis = sec_axis(~./400)) # divide the y2 axis by 2
## TODO:
p1<-ggplot(df_composite) +
geom_point(aes(x = univ_GPA, y = both_SAT, color = "both SAT")) +
labs(x = "Universit GPA", y = "both_SAT", color = "red")
p2<-ggplot(df_composite) +
geom_line(aes(x = univ_GPA, y = high_GPA, color = "highschool GPA")) +
labs(y = "highschool GPA", color = "blue")+
scale_y_continuous(name = "highschool", sec.axis = sec_axis(~./400)) # divide the y2 axis by 2
p_comb<-p1+p2
## TODO:
ggplot(df_composite) +
geom_point(aes(x = univ_GPA, y = both_SAT, color = "both SAT")) +
labs(x = "Universit GPA", y = "both_SAT", color = "red") +
geom_line(aes(x = univ_GPA, y = high_GPA, color = "highschool GPA")) +
labs(y = "highschool GPA", color = "blue")+
scale_y_continuous(name = "highschool", sec.axis = sec_axis(~./400)) # divide the y2 axis by 2
## TODO:
df_composite_long <- pivot_longer(df_composite, cols = c("high_GPA", "both_SAT"),
names_to = "variable", values_to = "value")
# Create the scatter plot with a regression line
ggplot(df_composite_long, aes(x = univ_GPA, y = value, color = variable)) +
geom_point() +
labs(x = "University GPA", y = "Both SAT score", color = "") +
theme_bw()
## TODO:
df_composite_long <- pivot_longer(df_composite, cols = c("high_GPA", "both_SAT"),
names_to = "variable", values_to = "value")
# Create the scatter plot with a regression line
ggplot(df_composite_long, aes(x = univ_GPA, y = value, color = variable)) +
geom_point() +
labs(x = "University GPA", y = "Both SAT score", color = "") +
theme_bw()
#I dont like how its not scaled, i tried using the y_scale_continous thing but it didnt work out...
ggplot(df_composite, aes(x = univ_GPA, y = both_GPA)) +
geom_point()
## TODO:
df_composite_long <- pivot_longer(df_composite, cols = c("high_GPA", "both_SAT"),
names_to = "variable", values_to = "value")
# Create the scatter plot with a regression line
ggplot(df_composite_long, aes(x = univ_GPA, y = value, color = variable)) +
geom_point() +
labs(x = "University GPA", y = "Both SAT score", color = "") +
theme_bw()
#I dont like how its not scaled, i tried using the y_scale_continous thing but it didnt work out...
ggplot(df_composite, aes(x = univ_GPA, y = both_GPA)) +
geom_point()
## TODO:
df_composite_long <- pivot_longer(df_composite, cols = c("high_GPA", "both_SAT"),
names_to = "variable", values_to = "value")
# Create the scatter plot with a regression line
ggplot(df_composite_long, aes(x = univ_GPA, y = value, color = variable)) +
geom_point() +
labs(x = "University GPA", y = "Both SAT score", color = "") +
theme_bw()
#I dont like how its not scaled, i tried using the y_scale_continous thing but it didnt work out...
ggplot(df_composite, aes(x = univ_GPA, y = both_SAT)) +
geom_point()
ggplot(df_composite, aes(x = univ_GPA, y = high_GPA)) +
geom_point()
ggplot(df_composite_long, aes(x = both_SAT)) + geom_histogram(fill = "red", alpha = 0.5) +
labs(title = "Histogram of both_SAT")
ggplot(df_composite, aes(x = both_SAT)) + geom_histogram(fill = "red", alpha = 0.5) +
labs(title = "Histogram of both_SAT")
ggplot(df_composite, aes(x = high_GPA)) + geom_histogram(fill = "green", alpha = 0.5) +
labs(title = "Histogram of high_GPA")
ggplot(df_composite, aes(x = univ_GPA)) + geom_histogram(fill = "blue", alpha = 0.5) +
labs(title = "Histogram of univ_GPA")
ggplot(df_composite, aes(x = both_SAT)) + geom_histogram(fill = "red", alpha = 0.5) +
labs(title = "Histogram of both_SAT")
ggplot(df_composite, aes(x = high_GPA)) + geom_histogram(fill = "green", alpha = 1) +
labs(title = "Histogram of high_GPA")
ggplot(df_composite, aes(x = univ_GPA)) + geom_histogram(fill = "blue", alpha = 1) +
labs(title = "Histogram of univ_GPA")
ggplot(df_composite, aes(x = both_SAT)) + geom_histogram(binwdth=50, fill = "red", alpha = 0.5) +
labs(title = "Histogram of both_SAT")
ggplot(df_composite, aes(x = high_GPA)) + geom_histogram(binwdth=0.5,fill = "green", alpha = 0.5) +
labs(title = "Histogram of high_GPA")
ggplot(df_composite, aes(x = univ_GPA)) + geom_histogram(binwdth=0.5,fill = "blue", alpha = 0.5) +
labs(title = "Histogram of univ_GPA")
ggplot(df_composite, aes(x = both_SAT)) + geom_histogram(binwdth=50, fill = "red") +
labs(title = "Histogram of both_SAT")
ggplot(df_composite, aes(x = high_GPA)) + geom_histogram(binwdth=0.5,fill = "green" +
labs(title = "Histogram of high_GPA")
ggplot(df_composite, aes(x = univ_GPA)) + geom_histogram(binwdth=0.5,fill = "blue") +
ggplot(df_composite, aes(x = both_SAT)) + geom_histogram(binwdth=50, fill = "red") +
labs(title = "Histogram of both_SAT")
ggplot(df_composite, aes(x = high_GPA)) + geom_histogram(binwdth=0.5,fill = "green") +
labs(title = "Histogram of high_GPA")
ggplot(df_composite, aes(x = univ_GPA)) + geom_histogram(binwdth=0.5,fill = "blue") +
labs(title = "Histogram of univ_GPA")
ggplot(df_composite, aes(x = both_SAT)) + geom_histogram(binwdth=50, fill = "red") +
labs(title = "Histogram of both_SAT")
ggplot(df_composite, aes(x = high_GPA)) + geom_histogram(binwdth=1,fill = "green") +
labs(title = "Histogram of high_GPA")
ggplot(df_composite, aes(x = univ_GPA)) + geom_histogram(binwdth=0.5,fill = "blue") +
labs(title = "Histogram of univ_GPA")
ggplot(df_composite, aes(x = both_SAT)) + geom_histogram(binwidth=50, fill = "red") +
labs(title = "Histogram of both_SAT")
ggplot(df_composite, aes(x = high_GPA)) + geom_histogram(binwidth=0.5, fill = "green") +
labs(title = "Histogram of high_GPA")
ggplot(df_composite, aes(x = univ_GPA)) + geom_histogram(binwidth=0.5,fill = "blue") +
labs(title = "Histogram of univ_GPA")
ggplot(df_composite, aes(x = both_SAT)) + geom_histogram(binwidth=10, fill = "red") +
labs(title = "Histogram of both_SAT")
ggplot(df_composite, aes(x = high_GPA)) + geom_histogram(binwidth=0.25, fill = "green") +
labs(title = "Histogram of high_GPA")
ggplot(df_composite, aes(x = univ_GPA)) + geom_histogram(binwidth=0.25,fill = "blue") +
labs(title = "Histogram of univ_GPA")
ggplot(df_composite, aes(x = both_SAT)) + geom_histogram(binwidth=50, fill = "red") +
labs(title = "Histogram of both_SAT")
ggplot(df_composite, aes(x = high_GPA)) + geom_histogram(binwidth=0.25, fill = "green") +
labs(title = "Histogram of high_GPA")
ggplot(df_composite, aes(x = univ_GPA)) + geom_histogram(binwidth=0.25,fill = "blue") +
labs(title = "Histogram of univ_GPA")
ggplot(df_composite, aes(x = both_SAT)) + geom_histogram(binwidth=20, fill = "red") +
labs(title = "Histogram of both_SAT")
ggplot(df_composite, aes(x = high_GPA)) + geom_histogram(binwidth=0.25, fill = "green") +
labs(title = "Histogram of high_GPA")
ggplot(df_composite, aes(x = univ_GPA)) + geom_histogram(binwidth=0.25,fill = "blue") +
labs(title = "Histogram of univ_GPA")
ggplot(df_composite, aes(x = both_SAT)) + geom_histogram(binwidth=50, fill = "red") +
labs(title = "Histogram of both_SAT")
ggplot(df_composite, aes(x = high_GPA)) + geom_histogram(binwidth=0.25, fill = "green") +
labs(title = "Histogram of high_GPA")
ggplot(df_composite, aes(x = univ_GPA)) + geom_histogram(binwidth=0.25,fill = "blue") +
labs(title = "Histogram of univ_GPA")
ggplot(df_composite, aes(x = both_SAT)) + geom_histogram(binwidth=100, fill = "red") +
labs(title = "Histogram of both_SAT")
ggplot(df_composite, aes(x = high_GPA)) + geom_histogram(binwidth=0.25, fill = "green") +
labs(title = "Histogram of high_GPA")
ggplot(df_composite, aes(x = univ_GPA)) + geom_histogram(binwidth=0.25,fill = "blue") +
labs(title = "Histogram of univ_GPA")
ggplot(df_composite, aes(x = both_SAT)) + geom_histogram(binwidth=50, fill = "red") +
labs(title = "Histogram of both_SAT")
ggplot(df_composite, aes(x = high_GPA)) + geom_histogram(binwidth=0.25, fill = "green") +
labs(title = "Histogram of high_GPA")
ggplot(df_composite, aes(x = univ_GPA)) + geom_histogram(binwidth=0.25,fill = "blue") +
labs(title = "Histogram of univ_GPA")
## TODO: Use the function cor.test() to test the correlations between
##       high_GPA and univ_GPA, as well as between
##       both_SAT and univ_GPA
# calculate the correlation and confidence intervals for high_GPA and univ_GPA
cor_test_high_univ <- cor.test(high_GPA, univ_GPA)
## TODO: Use the function cor.test() to test the correlations between
##       high_GPA and univ_GPA, as well as between
##       both_SAT and univ_GPA
# calculate the correlation and confidence intervals for high_GPA and univ_GPA
df_composite %>%
cor_test_high_univ <- cor.test(high_GPA, univ_GPA)
## TODO: Use the function cor.test() to test the correlations between
##       high_GPA and univ_GPA, as well as between
##       both_SAT and univ_GPA
# calculate the correlation and confidence intervals for high_GPA and univ_GPA
cor_test_high_univ <- cor.test(df_composite$high_GPA, df_composite$univ_GPA)
cat("Correlation between high_GPA and univ_GPA:", round(cor_test_high_univ$estimate, 2), "\n")
cat("Confidence interval for the correlation:", round(cor_test_high_univ$conf.int, 2), "\n")
# calculate the correlation and confidence intervals for both_SAT and univ_GPA
cor_test_both_univ <- cor.test(both_SAT, univ_GPA)
## TODO: Use the function cor.test() to test the correlations between
##       high_GPA and univ_GPA, as well as between
##       both_SAT and univ_GPA
# calculate the correlation and confidence intervals for high_GPA and univ_GPA
cor_test_high_univ <- cor.test(df_composite$high_GPA, df_composite$univ_GPA)
cat("Correlation between high_GPA and univ_GPA:", round(cor_test_high_univ$estimate, 2), "\n")
cat("Confidence interval for the correlation:", round(cor_test_high_univ$conf.int, 2), "\n")
# calculate the correlation and confidence intervals for both_SAT and univ_GPA
cor_test_both_univ <- cor.test(df_composite$both_SAT, df_composite$univ_GPA)
cat("Correlation between both_SAT and univ_GPA:", round(cor_test_both_univ$estimate, 2), "\n")
cat("Confidence interval for the correlation:", round(cor_test_both_univ$conf.int, 2), "\n")
## TODO: Use the bootstrap to compute a confidence interval for corr[high_GPA, univ_GPA]
corr_fn <- function(data, indices) {
cor(data[indices, "high_GPA"], data[indices, "univ_GPA"])
}
# set the random seed for reproducibility
set.seed(123)
# perform the bootstrap
n_bootstrap <- 1000
bootstrap_corr <- replicate(n_bootstrap, corr_fn(df_composite, sample(nrow(df_composite), nrow(df_composite), replace = TRUE)))
# calculate the confidence interval
bootstrap_ci <- quantile(bootstrap_corr, c(0.025, 0.975))
# print the results
cat("Bootstrap estimate of correlation:", round(mean(bootstrap_corr), 2), "\n")
cat("Bootstrap confidence interval:", round(bootstrap_ci, 2))
## NOTE: No need to edit
set.seed(101)
df_train <-
df_composite %>%
rowid_to_column() %>%
slice_sample(n = 80)
df_validate <-
df_composite %>%
rowid_to_column() %>%
anti_join(
.,
df_train,
by = "rowid"
)
## TODO: Fit a model of univ_GPA on the predictor both_SAT
fit_basic <- lm(univ_GPA ~ both_SAT, data = df_composite)
## Assess the model
summary(fit_basic)
## NOTE: The following computes confidence intervals on regression coefficients
fit_basic %>%
tidy(
conf.int = TRUE,
conf.level = 0.99
)
## TODO: Fit and assess models with predictors both_SAT + high_GPA, and high_GPA alone
fit_both <- lm(univ_GPA ~ high_GPA + both_SAT, data = df_composite)
## Assess the model
summary(fit_both)
## Fit the model with high_GPA only
fit_high <- lm(univ_GPA ~ high_GPA, data = df_composite)
## Assess the model
summary(fit_high)
## Fit the model with high_GPA only
fit_high <- lm(univ_GPA ~ high_GPA, data = df_composite)
## TODO: Fit and assess models with predictors both_SAT + high_GPA, and high_GPA alone
fit_both <- lm(univ_GPA ~ high_GPA + both_SAT, data = df_composite)
## Assess the model
summary(fit_both)
fit_both %>%
tidy(
conf.int = TRUE,
conf.level = 0.99
)
## Fit the model with high_GPA only
fit_high <- lm(univ_GPA ~ high_GPA, data = df_composite)
## Assess the model
summary(fit_high)
fit_high %>%
tidy(
conf.int = TRUE,
conf.level = 0.99
)
