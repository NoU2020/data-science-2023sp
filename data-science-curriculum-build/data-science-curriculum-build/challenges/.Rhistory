#no matter what i do it always shows up as NA, how can i solve this?
df_normalized %>%
summarise(
mean_cases = mean(cases_per100k),
std_cases = sd(cases_per100k),
mean_deaths = mean(deaths_per100k),
std_deaths = sd(deaths_per100k)
)
## TASK: Find the top 10 max cases_per100k counties; report populations as well
df_normalized %>%
arrange(desc(max_cases_per100k)) %>%
head(10)
## TASK: Find the top 10 max cases_per100k counties; report populations as well
df_normalized %>%
arrange(desc(cases_per100k)) %>%
head(10)
## TASK: Find the top 10 deaths_per100k counties; report populations as well
## TASK: Find the top 10 max cases_per100k counties; report populations as well
df_normalized %>%
arrange(desc(cases_per100k)) %>%
head(10)
## TASK: Find the top 10 deaths_per100k counties; report populations as well
df_normalized %>%
arrange(desc(deaths_per100k)) %>%
head(10)
## TASK: Find the top 10 max cases_per100k counties; report populations as well
df_normalized %>%
arrange(desc(cases_per100k), county) %>%
distinct(county, .keep_all = TRUE) %>%
head(10)
## TASK: Find the top 10 deaths_per100k counties; report populations as well
df_normalized %>%
arrange(desc(deaths_per100k)) %>%
head(10)
## TASK: Find the top 10 max cases_per100k counties; report populations as well
df_normalized %>%
arrange(desc(cases_per100k), county) %>%
distinct(county, .keep_all = TRUE) %>%
head(10)
## TASK: Find the top 10 deaths_per100k counties; report populations as well
df_normalized %>%
arrange(desc(deaths_per100k), county) %>%
head(10)
## TASK: Find the top 10 max cases_per100k counties; report populations as well
df_normalized %>%
arrange(desc(cases_per100k), county) %>%
distinct(county, .keep_all = TRUE) %>%
head(10)
## TASK: Find the top 10 deaths_per100k counties; report populations as well
df_normalized %>%
arrange(desc(deaths_per100k)) %>%
distinct(county, .keep_all = TRUE) %>%
head(10)
## TASK: Find the top 10 max cases_per100k counties; report populations as well
df_normalized %>%
arrange(desc(cases_per100k)) %>%
distinct(county, .keep_all = TRUE) %>%
head(10)
## TASK: Find the top 10 deaths_per100k counties; report populations as well
df_normalized %>%
arrange(desc(deaths_per100k)) %>%
distinct(county, .keep_all = TRUE) %>%
head(10)
## NOTE: No need to change this; just an example
df_normalized %>%
filter(state == "Massachusetts") %>%
ggplot(
aes(date, cases_per100k, color = fct_reorder2(county, date, cases_per100k))
) +
geom_line() +
scale_y_log10(labels = scales::label_number_si()) +
scale_color_discrete(name = "County") +
theme_minimal() +
labs(
x = "Date",
y = "Cases (per 100,000 persons)"
)
## NOTE: No need to change this; just an example
df_normalized %>%
filter(state == "Massachusetts") %>%
ggplot(
aes(date, cases_per100k, color = fct_reorder2(county, date, cases_per100k))
) +
geom_line() +
scale_y_log10(labels = scales::label_number()) +
scale_color_discrete(name = "County") +
theme_minimal() +
labs(
x = "Date",
y = "Cases (per 100,000 persons)"
)
df_normalized %>%
ggplot(
aes(date, cases_per100k, color = fct_reorder2(county, date, cases_per100k/population))
) +
geom_line() +
scale_y_log10(labels = scales::label_number()) +
theme_minimal() +
labs(
x = "Date",
y = "Cases (per 100,000 persons)"
)
df_normalized %>%
arrange(desc(cases_per100k)) %>%
distinct(county, .keep_all = TRUE) %>%
head(10)
ggplot(
aes(date, cases_per100k, color = fct_reorder2(county, date, cases_per100k/population))
) +
geom_line() +
scale_y_log10(labels = scales::label_number()) +
theme_minimal() +
labs(
x = "Date",
y = "Cases (per 100,000 persons)"
)
df_normalized %>%
filter(state == "New York")
ggplot(
aes(date, cases_per100k, color = fct_reorder2(county, date, cases_per100k/population))
) +
geom_line() +
scale_y_log10(labels = scales::label_number()) +
theme_minimal() +
labs(
x = "Date",
y = "Cases (per 100,000 persons)"
)
df_normalized %>%
filter(state == "New York") %>%
ggplot(
aes(date, cases_per100k, color = fct_reorder2(county, date, cases_per100k/population))
) +
geom_line() +
scale_y_log10(labels = scales::label_number()) +
theme_minimal() +
labs(
x = "Date",
y = "Cases (per 100,000 persons)"
)
df_normalized %>%
filter(state == "New York") %>%
ggplot(
aes(date, cases_per100k, color = fct_reorder2(county, population, cases_per100k))
) +
geom_line() +
scale_y_log10(labels = scales::label_number()) +
theme_minimal() +
labs(
x = "Date",
y = "Cases (per 100,000 persons)"
)
df_normalized %>%
filter(state == "New York")
ggplot(
aes(date, cases_per100k/population, color = fct_reorder2(county, date, cases_per100k))
) +
geom_line() +
scale_y_log10(labels = scales::label_number()) +
theme_minimal() +
labs(
x = "Date",
y = "Cases (per 100,000 persons)"
)
df_normalized %>%
filter(state == "New York") %>%
ggplot(
aes(date, cases_per100k/population, color = fct_reorder2(county, date, cases_per100k))
) +
geom_line() +
scale_y_log10(labels = scales::label_number()) +
theme_minimal() +
labs(
x = "Date",
y = "Cases (per 100,000 persons)"
)
df_normalized %>%
filter(state == "New York") %>%
ggplot(
aes(population, cases_per100k, color = fct_reorder2(county, date, cases_per100k))
) +
geom_line() +
scale_y_log10(labels = scales::label_number()) +
theme_minimal() +
labs(
x = "Date",
y = "Cases (per 100,000 persons)"
)
df_normalized %>%
filter(state == "New York") %>%
ggplot(
aes(population, cases_per100k, color = fct_reorder2(county, date, cases_per100k))
) +
geom_point() +
scale_y_log10(labels = scales::label_number()) +
scale_x_log10(labels = scales::label_number()) +
theme_minimal() +
labs(
x = "Date",
y = "Cases (per 100,000 persons)"
)
df_normalized %>%
filter(state == "New York") %>%
ggplot(
aes(population, cases_per100k)
) +
geom_point() +
scale_y_log10() +
scale_x_log10() +
theme_minimal() +
labs(
x = "Date",
y = "Cases (per 100,000 persons)"
)
df_normalized %>%
filter(state == "New York") %>%
arrange(desc(cases_per100k)) %>%
distinct(county, .keep_all = TRUE) %>%
ggplot(
aes(population, cases_per100k)
) +
geom_point() +
scale_y_log10() +
scale_x_log10() +
theme_minimal() +
labs(
x = "Date",
y = "Cases (per 100,000 persons)"
)
df_normalized %>%
filter(state == "New York") %>%
arrange(desc(cases_per100k)) %>%
distinct(county, .keep_all = TRUE) %>%
ggplot(
aes(population, cases_per100k)
) +
geom_point() +
scale_y_log10() +
theme_minimal() +
labs(
x = "Date",
y = "Cases (per 100,000 persons)"
)
df_normalized %>%
filter(state == "New York") %>%
arrange(desc(cases_per100k)) %>%
distinct(county, .keep_all = TRUE) %>%
ggplot(
aes(population, cases_per100k)
) +
geom_point() +
scale_y_log10() +
scale_x_log10() +
theme_minimal() +
labs(
x = "Date",
y = "Cases (per 100,000 persons)"
)
df_normalized %>%
filter(state == "New York") %>%
arrange(desc(cases_per100k)) %>%
distinct(county, .keep_all = TRUE) %>%
ggplot(
aes(population, cases)
) +
geom_point() +
scale_y_log10() +
scale_x_log10() +
theme_minimal() +
labs(
x = "Population",
y = "Cases (per 100,000 persons)"
)
df_normalized %>%
filter(state == "New York") %>%
arrange(desc(cases_per100k)) %>%
distinct(county, .keep_all = TRUE) %>%
ggplot(
aes(population, deaths)
) +
geom_point() +
scale_y_log10() +
scale_x_log10() +
theme_minimal() +
labs(
x = "Population",
y = "Cases (per 100,000 persons)"
)
df_normalized %>%
filter(state == "New York") %>%
arrange(desc(cases_per100k)) %>%
distinct(county, .keep_all = TRUE) %>%
ggplot(
aes(population, deaths)
) +
geom_point() +
scale_y_log10() +
theme_minimal() +
labs(
x = "Population",
y = "Cases (per 100,000 persons)"
)
df_normalized %>%
filter(state == "New York") %>%
arrange(desc(cases_per100k)) %>%
distinct(county, .keep_all = TRUE) %>%
ggplot(
aes(population, deaths)
) +
geom_point() +
theme_minimal() +
labs(
x = "Population",
y = "Cases (per 100,000 persons)"
)
df_normalized %>%
filter(state == "New York") %>%
arrange(desc(cases_per100k)) %>%
distinct(county, .keep_all = TRUE) %>%
ggplot(
aes(population, deaths)
) +
geom_point() +
scale_y_log10() +
scale_x_log10() +
theme_minimal() +
labs(
x = "Population",
y = "Cases (per 100,000 persons)"
)
df_normalized %>%
arrange(desc(cases_per100k)) %>%
distinct(county, .keep_all = TRUE) %>%
ggplot(
aes(population, deaths)
) +
geom_point() +
scale_y_log10() +
scale_x_log10() +
theme_minimal() +
labs(
x = "Population",
y = "Cases (per 100,000 persons)"
)
df_normalized %>%
arrange(desc(cases_per100k)) %>%
distinct(county, .keep_all = TRUE) %>%
na.omit() %>%
ggplot(
aes(population, deaths)
) +
geom_point() +
scale_y_log10() +
scale_x_log10() +
theme_minimal() +
labs(
x = "Population",
y = "Cases (per 100,000 persons)"
)
df_normalized %>%
arrange(desc(deaths_per100k)) %>%
distinct(county, .keep_all = TRUE) %>%
ggplot(
aes(population, deaths_per100k)
) +
geom_point() +
scale_y_log10() +
scale_x_log10() +
theme_minimal() +
labs(
x = "Population",
y = "Deaths (per 100,000 persons)"
)
df_normalized %>%
arrange(desc(deaths_per100k)) %>%
distinct(county, .keep_all = TRUE) %>%
ggplot(
aes(population, deaths_per100k/cases_per100k)
) +
geom_point() +
scale_y_log10() +
scale_x_log10() +
theme_minimal() +
labs(
x = "Population",
y = "Deaths (per 100,000 persons)"
)
df_normalized %>%
arrange(desc(deaths_per100k)) %>%
distinct(county, .keep_all = TRUE) %>%
ggplot(
aes(population, deaths/cases)
) +
geom_point() +
scale_y_log10() +
scale_x_log10() +
theme_minimal() +
labs(
x = "Population",
y = "Deaths (per 100,000 persons)"
)
df_normalized %>%
arrange(desc(deaths_per100k)) %>%
distinct(county, .keep_all = TRUE) %>%
ggplot(
aes(population, deaths/cases)
) +
geom_point() +
scale_y_log10() +
theme_minimal() +
labs(
x = "Population",
y = "Deaths (per 100,000 persons)"
)
df_normalized %>%
arrange(desc(deaths_per100k)) %>%
distinct(county, .keep_all = TRUE) %>%
ggplot(
aes(population, deaths/cases)
) +
geom_point() +
theme_minimal() +
labs(
x = "Population",
y = "Death per Case (per 100,000 persons)"
)
df_normalized %>%
arrange(desc(deaths_per100k)) %>%
distinct(county, .keep_all = TRUE) %>%
ggplot(
aes(population, deaths/cases)
) +
geom_point() +
scale_y_log10() +
theme_minimal() +
labs(
x = "Population",
y = "Death per Case (per 100,000 persons)"
)
df_normalized %>%
arrange(desc(deaths_per100k)) %>%
distinct(county, .keep_all = TRUE) %>%
ggplot(
aes(population, deaths/cases)
) +
geom_point() +
scale_x_log10() +
theme_minimal() +
labs(
x = "Population",
y = "Death per Case (per 100,000 persons)"
)
df_normalized %>%
arrange(desc(deaths_per100k)) %>%
distinct(county, .keep_all = TRUE) %>%
ggplot(
aes(population, deaths/cases)
) +
geom_point() +
theme_minimal() +
labs(
x = "Population",
y = "Death per Case (per 100,000 persons)"
)
df_normalized %>%
arrange(desc(deaths_per100k)) %>%
distinct(county, .keep_all = TRUE) %>%
ggplot(
aes(population, deaths/cases)
) +
geom_point() +
geom_hline(yintercept = mean(deaths/cases))
df_normalized %>%
arrange(desc(deaths_per100k)) %>%
distinct(county, .keep_all = TRUE) %>%
ggplot(
aes(population, deaths/cases)
) +
geom_point() +
geom_hline(yintercept = mean(df_normalized$deaths/df_normalized$cases))
theme_minimal() +
labs(
x = "Population",
y = "Death per Case (per 100,000 persons)"
)
df_normalized %>%
arrange(desc(deaths_per100k)) %>%
distinct(county, .keep_all = TRUE) %>%
ggplot(
aes(population, deaths/cases)
) +
geom_point() +
geom_hline(yintercept = mean(df_normalized$deaths/df_normalized$cases))+
theme_minimal() +
labs(
x = "Population",
y = "Death per Case (per 100,000 persons)"
)
df_normalized %>%
arrange(desc(deaths_per100k)) %>%
distinct(county, .keep_all = TRUE) %>%
ggplot(
aes(population, deaths/cases)
) +
geom_point() +
geom_hline(yintercept = mean(df_normalized$deaths/df_normalized$cases))+
scale_y_log10()+
theme_minimal() +
labs(
x = "Population",
y = "Death per Case (per 100,000 persons)"
)
