pr_level <- 0.8
## TODO: Fit a model, assess the uncertainty in your prediction,
#        use the validation data to check your uncertainty estimates, and
#        make a recommendation on a *dependable range* of values for T_norm
#        at the point `df_design`
fit_q6 <- lm(T_norm ~ x + L + W + U_0  , data = df_train)
rsquare(fit_q6, df_validate)
# Compute predicted interval for df_design
pred_int <- predict(fit_q6, newdata = df_design, interval = "prediction", level = pr_level)
# Compute fraction of validation cases within predicted interval
frac_within_interval <- mean(between(df_validate$T_norm, pred_int[1], pred_int[2]))
frac_within_interval
library(tidyverse)
library(broom)
## TODO: Download the data, move to your data folder, and load it
filename <- "./data/yg821jf8611_ma_statewide_2020_04_01.rds"
df_data <- readRDS(filename)
glimpse(df_data)
## TODO: Determine the factor levels for subject_race and raw_Race
levels(data$subject_race)
## TODO: Determine the factor levels for subject_race and raw_Race
levels(df_data$subject_race)
levels(df_data$raw_Race)
## TODO: Determine the factor levels for subject_race and raw_Race
levels(df_data$subject_race)
levels(df_data$raw_Race)
levels(df_data$race_raw)
levels(df_data$raw_Race)
## TODO: Determine the factor levels for subject_race and raw_Race
levels(df_data$raw_Race)
## TODO: Determine the factor levels for subject_race and raw_Race
levels(df_data$subject_race)
View(df_data)
View(df_data)
## TODO: Devise your own way to test the hypothesis posed above.
## Create a contingency table of the two variables
cont_table <- table(df_data$subject_race, df_data$raw_Race)
## Calculate the proportion of cases where the two variables match
match_prop <- sum(diag(cont_table)) / sum(cont_table)
## Print the proportion
match_prop
## Create a bar plot of mean arrest rate by subject_race
race_summary <-df_ data %>%
## Create a bar plot of mean arrest rate by subject_race
race_summary <-df_data %>%
group_by(subject_race) %>%
summarize(arrest_rate = mean(is_arrested), .groups = "drop") %>%
ggplot(aes(x = subject_race, y = arrest_rate)) +
geom_col() +
labs(x = "Subject Race", y = "Arrest Rate", title = "Arrest Rate by Subject Race")
## Create a bar plot of mean arrest rate by subject_race
race_summary <-df_data %>%
group_by(subject_race) %>%
ggplot(aes(x = subject_race, y = arrest_rate)) +
geom_col() +
labs(x = "Subject Race", y = "Arrest Rate", title = "Arrest Rate by Subject Race")
## Print the bar plot
race_summary
## Create a bar plot of mean arrest rate by subject_race
race_summary <-df_data %>%
group_by(subject_race) %>%
summarize(arrest_rate = mean(arrest_made), .groups = "drop") %>%
ggplot(aes(x = subject_race, y = arrest_rate)) +
geom_col() +
labs(x = "Subject Race", y = "Arrest Rate", title = "Arrest Rate by Subject Race")
## Print the bar plot
race_summary
## Create a bar plot of mean arrest rate by subject_race
race_summary <-df_data %>%
group_by(subject_race) %>%
summarize(arrest_rate = mean(arrest_made)) %>%
ggplot(aes(x = subject_race, y = arrest_rate)) +
geom_col() +
labs(x = "Subject Race", y = "Arrest Rate", title = "Arrest Rate by Subject Race")
## Print the bar plot
race_summary
## Create a bar plot of mean arrest rate by subject_race
race_summary <-df_data %>%
group_by(subject_race) %>%
summarize(arrest_rate = mean(arrest_made)) %>%
ggplot(aes(x = subject_race, y = arrest_rate)) +
geom_point()
## Print the bar plot
race_summary
## Create a bar plot of mean arrest rate by subject_race
race_summary <-df_data %>%
group_by(subject_race) %>%
na.omit(subject_race) %>%
summarize(arrest_rate = mean(arrest_made)) %>%
ggplot(aes(x = subject_race, y = arrest_rate)) +
geom_point()
## Print the bar plot
race_summary
## Create a bar plot of mean arrest rate by subject_race
race_summary <-df_data %>%
group_by(subject_race) %>%
na.omit(subject_race) %>%
summarize(arrest_rate = mean(arrest_made)) %>%
ggplot(aes(x = subject_race, y = arrest_rate)) +
geom_col()
## Print the bar plot
race_summary
## Create a bar plot of mean arrest rate by subject_race
race_summary <-df_data %>%
group_by(subject_race) %>%
na.omit(subject_race) %>%
summarize(arrest_rate = mean(arrest_made)) %>%
ggplot(aes(x = subject_race, y = arrest_rate)) +
geom_col()
## Print the bar plot
race_summary
age_summary <-df_data %>%
group_by(subject_age) %>%
na.omit(subject_age) %>%
summarize(arrest_rate = mean(arrest_made)) %>%
ggplot(aes(x = subject_age, y = arrest_rate)) +
geom_col()
## Print the bar plot
age_summary
## Create a bar plot of mean arrest rate by subject_race
race_summary <-df_data %>%
group_by(subject_race) %>%
na.omit(subject_race) %>%
summarize(arrest_rate = mean(arrest_made)) %>%
ggplot(aes(x = subject_race, y = arrest_rate)) +
geom_col()
## Print the bar plot
race_summary
age_summary <-df_data %>%
group_by(subject_age) %>%
na.omit(subject_age) %>%
summarize(arrest_rate = mean(arrest_made)) %>%
ggplot(aes(x = subject_age, y = arrest_rate)) +
geom_col()
## Print the bar plot
age_summary
sex_summary <-df_data %>%
group_by(subject_sex) %>%
na.omit(subject_sex) %>%
summarize(arrest_rate = mean(arrest_made)) %>%
ggplot(aes(x = subject_sex, y = arrest_rate)) +
geom_col()
## Print the bar plot
sex_summary
## NOTE: No need to edit; inspect the estimated model terms.
fit_q6 <-
glm(
formula = arrest_made ~ subject_age + subject_race + subject_sex,
data = df_data %>%
filter(
!is.na(arrest_made),
subject_race %in% c("white", "black", "hispanic")
),
family = "binomial"
)
fit_q6 %>% tidy()
## TODO: Re-fit the logistic regression, but set "white" as the reference
## level for subject_race
## Refit the logistic regression with "white" as the reference level for subject_race
fit_q7 <- glm(is_arrested ~ subject_race %>% fct_relevel("white") + subject_sex + subject_age, data = data, family = "binomial")
## TODO: Re-fit the logistic regression, but set "white" as the reference
## level for subject_race
## Refit the logistic regression with "white" as the reference level for subject_race
fit_q7 <- glm(is_arrested ~ subject_race %>% fct_relevel("white") + subject_sex + subject_age, data = df_data, family = "binomial")
## TODO: Re-fit the logistic regression, but set "white" as the reference
## level for subject_race
## Refit the logistic regression with "white" as the reference level for subject_race
fit_q7 <- glm(arrest_made ~ subject_race %>% fct_relevel("white") + subject_sex + subject_age, data = df_data, family = "binomial")
## Print the summary of the fitted model
summary(fit_q7)
fit_q7 %>% tidy()
View(df_data)
## TODO: Repeat the modeling above, but control for whether contraband was found
## during the police stop
fit_q8 %>% tidy()
## TODO: Repeat the modeling above, but control for whether contraband was found
## during the police stop
## Fit the logistic regression with contraband as a predictor variable
fit_q8 <- glm(arrest_made ~ subject_race + subject_sex + subject_age + contraband_found, data = df_data, family = "binomial")
fit_q8 %>% tidy()
## Print the summary of the fitted model
summary(fit_q8)
## TODO: Re-fit the logistic regression, but set "white" as the reference
## level for subject_race
## Refit the logistic regression with "white" as the reference level for subject_race
fit_q7 <- glm(arrest_made ~ subject_race %>% fct_relevel("white") + subject_sex + subject_age, data = df_data, family = "binomial")
fit_q7 %>% tidy()
## Print the summary of the fitted model
summary(fit_q7)
search_summary <-df_data %>%
group_by(search_basis) %>%
na.omit(search_basis) %>%
summarize(arrest_rate = mean(arrest_made)) %>%
ggplot(aes(x = search_basis, y = arrest_rate)) +
geom_col()
## Print the bar plot
search_summary
## TODO: Determine the factor levels for subject_race and raw_Race
levels(df_data$subject_race)
levels(df_data$raw_Race)
library(tidyverse)
library(gapminder)
## TASK: Find the largest and smallest values of `year` in `gapminder`
year_max <- max(gapminder %>% pull(year), na.rm = TRUE)
year_min <- min(gapminder %>% pull(year), na.rm = TRUE)
## TASK: Do your "first checks" here!
?gapminder
gapminder %>%
glimpse()
## TASK: Create a visual of gdpPercap vs continent
gapminder %>%
filter(year==year_min) %>%
ggplot(aes(x = continent, y = gdpPercap, group = continent)) +
geom_boxplot()+
scale_y_log10()
## TASK: Identify the outliers from q2
gapminder %>%
filter(year==year_min) %>%
filter(continent == "Europe") %>%
arrange(gdpPercap)
gapminder %>%
filter(year==year_min) %>%
filter(continent == "Asia") %>%
arrange(desc(gdpPercap))
gapminder %>%
filter(year==year_min) %>%
filter(continent == "Africa") %>%
arrange(desc(gdpPercap))
gapminder %>%
filter(year==year_min) %>%
filter(continent == "Americas") %>%
arrange(desc(gdpPercap))
gapminder %>%
filter(year==year_min) %>%
filter(continent == "Americas") %>%
arrange(gdpPercap)
## TASK: Create a visual of gdpPercap vs continent
# gapminder %>%
#   filter(year == max(year)) %>%
#
#   ggplot(aes(continent, gdpPercap, group= continent)) +
#   geom_boxplot() +
#   geom_point(
#     data = . %>% filter(country %in% c("Bosnia and Herzegovina", "Albania", "Kuwait", "Singapore", "Libya", "Gabon", "United States", "Canada", "Haiti")),
#     mapping = aes(color = country),
#     size = 2
#   )+
#   scale_y_log10()
gapminder %>%
filter(year == max(year) | year == min(year)) %>%
ggplot(aes(x = year, y = gdpPercap, group = continent)) +
geom_boxplot() +
geom_point(
data = . %>% filter(country %in% c("Bosnia and Herzegovina", "Albania", "Kuwait", "Singapore", "Libya", "Gabon", "United States", "Canada", "Haiti")),
mapping = aes(color = country, shape = country),
size = 3,
show.legend = TRUE
) +
scale_y_log10() +
facet_wrap(~continent, ncol = 3) +
labs(title = "GDP per capita by continent and year",
x = "Year",
y = "GDP per capita (log scale)",
color = "Country",
shape = "Country") +
theme_bw()
## TASK: Create a visual of gdpPercap vs continent
# gapminder %>%
#   filter(year == max(year)) %>%
#
#   ggplot(aes(continent, gdpPercap, group= continent)) +
#   geom_boxplot() +
#   geom_point(
#     data = . %>% filter(country %in% c("Bosnia and Herzegovina", "Albania", "Kuwait", "Singapore", "Libya", "Gabon", "United States", "Canada", "Haiti")),
#     mapping = aes(color = country),
#     size = 2
#   )+
#   scale_y_log10()
gapminder %>%
filter(year == max(year) | year == min(year)) %>%
ggplot(aes(x = year, y = gdpPercap, group = continent)) +
geom_boxplot() +
geom_point(
data = . %>% filter(country %in% c("Bosnia and Herzegovina", "Albania", "Kuwait", "Singapore", "Libya", "Gabon", "United States", "Canada", "Haiti")),
mapping = aes(color = country, shape = country),
size = 3,
show.legend = TRUE
) +
scale_y_log10() +
facet_wrap(~year, ncol = 3) +
labs(title = "GDP per capita by continent and year",
x = "Year",
y = "GDP per capita (log scale)",
color = "Country",
shape = "Country") +
theme_bw()
## TASK: Create a visual of gdpPercap vs continent
# gapminder %>%
#   filter(year == max(year)) %>%
#
#   ggplot(aes(continent, gdpPercap, group= continent)) +
#   geom_boxplot() +
#   geom_point(
#     data = . %>% filter(country %in% c("Bosnia and Herzegovina", "Albania", "Kuwait", "Singapore", "Libya", "Gabon", "United States", "Canada", "Haiti")),
#     mapping = aes(color = country),
#     size = 2
#   )+
#   scale_y_log10()
gapminder %>%
filter(year == max(year) | year == min(year)) %>%
ggplot(aes(x = year, y = gdpPercap, group = continent)) +
geom_boxplot() +
geom_point(
data = . %>% filter(country %in% c("Bosnia and Herzegovina", "Albania", "Kuwait", "Singapore", "Libya", "Gabon", "United States", "Canada", "Haiti")),
mapping = aes(color = country, shape = country),
size = 3,
show.legend = TRUE
) +
scale_y_log10() +
facet_wrap(~year) +
labs(title = "GDP per capita by continent and year",
x = "Year",
y = "GDP per capita (log scale)",
color = "Country",
shape = "Country") +
theme_bw()
## TASK: Create a visual of gdpPercap vs continent
# gapminder %>%
#   filter(year == max(year)) %>%
#
#   ggplot(aes(continent, gdpPercap, group= continent)) +
#   geom_boxplot() +
#   geom_point(
#     data = . %>% filter(country %in% c("Bosnia and Herzegovina", "Albania", "Kuwait", "Singapore", "Libya", "Gabon", "United States", "Canada", "Haiti")),
#     mapping = aes(color = country),
#     size = 2
#   )+
#   scale_y_log10()
gapminder %>%
filter(year == max(year) | year == min(year)) %>%
ggplot(aes(x = year, y = gdpPercap, group = continent)) +
geom_boxplot() +
geom_point(
data = . %>% filter(country %in% c("Bosnia and Herzegovina", "Albania", "Kuwait", "Singapore", "Libya", "Gabon", "United States", "Canada", "Haiti")),
size = 3,
show.legend = TRUE
) +
scale_y_log10() +
facet_wrap(year) +
labs(title = "GDP per capita by continent and year",
x = "Year",
y = "GDP per capita (log scale)",
color = "Country",
shape = "Country") +
theme_bw()
## TASK: Create a visual of gdpPercap vs continent
# gapminder %>%
#   filter(year == max(year)) %>%
#
#   ggplot(aes(continent, gdpPercap, group= continent)) +
#   geom_boxplot() +
#   geom_point(
#     data = . %>% filter(country %in% c("Bosnia and Herzegovina", "Albania", "Kuwait", "Singapore", "Libya", "Gabon", "United States", "Canada", "Haiti")),
#     mapping = aes(color = country),
#     size = 2
#   )+
#   scale_y_log10()
gapminder %>%
filter(year == max(year) | year == min(year)) %>%
ggplot(aes(x = year, y = gdpPercap, group = continent)) +
geom_boxplot() +
geom_point(
data = . %>% filter(country %in% c("Bosnia and Herzegovina", "Albania", "Kuwait", "Singapore", "Libya", "Gabon", "United States", "Canada", "Haiti")),
size = 3,
show.legend = TRUE
) +
scale_y_log10() +
facet_wrap(x) +
labs(title = "GDP per capita by continent and year",
x = "Year",
y = "GDP per capita (log scale)",
color = "Country",
shape = "Country") +
theme_bw()
## TASK: Create a visual of gdpPercap vs continent
# gapminder %>%
#   filter(year == max(year)) %>%
#
#   ggplot(aes(continent, gdpPercap, group= continent)) +
#   geom_boxplot() +
#   geom_point(
#     data = . %>% filter(country %in% c("Bosnia and Herzegovina", "Albania", "Kuwait", "Singapore", "Libya", "Gabon", "United States", "Canada", "Haiti")),
#     mapping = aes(color = country),
#     size = 2
#   )+
#   scale_y_log10()
gapminder %>%
filter(year == max(year) | year == min(year)) %>%
ggplot(aes(x = year, y = gdpPercap, group = continent)) +
geom_boxplot() +
geom_point(
data = . %>% filter(country %in% c("Bosnia and Herzegovina", "Albania", "Kuwait", "Singapore", "Libya", "Gabon", "United States", "Canada", "Haiti")),
size = 3,
show.legend = TRUE
) +
scale_y_log10() +
facet_wrap(~year) +
labs(title = "GDP per capita by continent and year",
x = "Year",
y = "GDP per capita (log scale)",
color = "Country",
shape = "Country") +
theme_bw()
## TASK: Create a visual of gdpPercap vs continent
# gapminder %>%
#   filter(year == max(year)) %>%
#
#   ggplot(aes(continent, gdpPercap, group= continent)) +
#   geom_boxplot() +
#   geom_point(
#     data = . %>% filter(country %in% c("Bosnia and Herzegovina", "Albania", "Kuwait", "Singapore", "Libya", "Gabon", "United States", "Canada", "Haiti")),
#     mapping = aes(color = country),
#     size = 2
#   )+
#   scale_y_log10()
gapminder %>%
filter(year == max(year) | year == min(year)) %>%
ggplot(aes(x = continent, y = gdpPercap)) +
geom_boxplot() +
geom_point(
data = . %>% filter(country %in% c("Bosnia and Herzegovina", "Albania", "Kuwait", "Singapore", "Libya", "Gabon", "United States", "Canada", "Haiti")),
size = 3,
show.legend = TRUE
) +
scale_y_log10() +
facet_wrap(~year) +
labs(title = "GDP per capita by continent and year",
x = "Year",
y = "GDP per capita (log scale)",
color = "Country",
shape = "Country") +
theme_bw()
## TASK: Create a visual of gdpPercap vs continent
gapminder %>%
filter(year == max(year) | year == min(year)) %>%
ggplot(aes(x = continent, y = gdpPercap)) +
geom_boxplot() +
geom_point(
data = . %>% filter(country %in% c("Bosnia and Herzegovina", "Albania", "Kuwait", "Singapore", "Libya", "Gabon", "United States", "Canada", "Haiti", "China")),
size = 3,
show.legend = TRUE
) +
scale_y_log10() +
facet_wrap(~year) +
labs(title = "GDP per capita by continent and year",
x = "Year",
y = "GDP per capita (log scale)",
color = "Country",
shape = "Country") +
theme_bw()
## TASK: Create a visual of gdpPercap vs continent
gapminder %>%
filter(year == max(year) | year == min(year)) %>%
ggplot(aes(x = continent, y = gdpPercap)) +
geom_boxplot() +
geom_point(
data = . %>% filter(country %in% c("Bosnia and Herzegovina", "Albania", "Kuwait", "Singapore", "Libya", "Gabon", "United States", "Canada", "Haiti")),
size = 3,
show.legend = TRUE
) +
scale_y_log10() +
facet_wrap(~year) +
labs(title = "GDP per capita by continent and year",
x = "Year",
y = "GDP per capita (log scale)",
color = "Country",
shape = "Country") +
theme_bw()
## TASK: Create a visual of gdpPercap vs continent
gapminder %>%
filter(year == max(year) | year == min(year)) %>%
ggplot(aes(x = continent, y = gdpPercap)) +
geom_boxplot() +
geom_point(
data = . %>% filter(country %in% c("Bosnia and Herzegovina", "Albania", "Kuwait", "Singapore", "Libya", "Gabon", "United States", "Canada", "Haiti", "China")),
size = 3,
show.legend = TRUE
) +
scale_y_log10() +
facet_wrap(~year) +
labs(title = "GDP per capita by continent and year",
x = "Year",
y = "GDP per capita (log scale)",
color = "Country",
shape = "Country") +
theme_bw()
## TASK: Your third graph
gapminder %>%
filter(year == 1997:2007) %>%
ggplot(aes(year, gdpPercap, group = year)) +
geom_boxplot() +
geom_point(
data = . %>% filter(country %in% c("United States")),
mapping = aes(color = country),
size = 2
)
## TASK: Create a visual of gdpPercap vs continent
gapminder %>%
filter(year==year_min) %>%
ggplot(aes(x = continent, y = gdpPercap, group = continent)) +
geom_boxplot()+
scale_y_log10()
